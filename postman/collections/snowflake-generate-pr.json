{
  "info": {
    "name": "Snowflake Generate PR Module",
    "description": "Generate PR content using Snowflake Cortex LLM (Hybrid AI tool)",
    "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
  },
  "item": [
    {
      "name": "Generate PR with Cortex",
      "event": [
        {
          "listen": "prerequest",
          "script": {
            "exec": [
              "// Pre-request script: Set defaults",
              "if (!pm.variables.get('feature_request')) {",
              "    pm.variables.set('feature_request', 'fix mobile login responsive design');",
              "}",
              "",
              "if (!pm.variables.get('repo_name')) {",
              "    const owner = pm.environment.get('GITHUB_REPO_OWNER') || 'demo';",
              "    const name = pm.environment.get('GITHUB_REPO_NAME') || 'repo';",
              "    pm.variables.set('repo_name', `${owner}/${name}`);",
              "}",
              "",
              "// Log request",
              "console.log('ðŸ¤– Calling Snowflake Cortex for PR generation...');",
              "console.log('Feature:', pm.variables.get('feature_request'));",
              "console.log('Files:', pm.variables.get('impacted_files'));"
            ],
            "type": "text/javascript"
          }
        },
        {
          "listen": "test",
          "script": {
            "exec": [
              "// Tests",
              "pm.test('Status code is 200', function () {",
              "    pm.response.to.have.status(200);",
              "});",
              "",
              "pm.test('Response has success field', function () {",
              "    const jsonData = pm.response.json();",
              "    pm.expect(jsonData).to.have.property('success');",
              "    pm.expect(jsonData.success).to.be.true;",
              "});",
              "",
              "pm.test('Response has PR title', function () {",
              "    const jsonData = pm.response.json();",
              "    pm.expect(jsonData).to.have.property('pr_title');",
              "    pm.expect(jsonData.pr_title).to.be.a('string');",
              "    pm.expect(jsonData.pr_title.length).to.be.above(5);",
              "});",
              "",
              "pm.test('Response has PR description', function () {",
              "    const jsonData = pm.response.json();",
              "    pm.expect(jsonData).to.have.property('pr_description');",
              "    pm.expect(jsonData.pr_description).to.be.a('string');",
              "});",
              "",
              "pm.test('Response has branch name', function () {",
              "    const jsonData = pm.response.json();",
              "    pm.expect(jsonData).to.have.property('branch_name');",
              "    pm.expect(jsonData.branch_name).to.match(/^pm-copilot\\//);",
              "});",
              "",
              "pm.test('Generated by Snowflake Cortex', function () {",
              "    const jsonData = pm.response.json();",
              "    pm.expect(jsonData.generated_by).to.include('Snowflake Cortex');",
              "});",
              "",
              "pm.test('Has hybrid AI info', function () {",
              "    const jsonData = pm.response.json();",
              "    pm.expect(jsonData).to.have.property('hybrid_ai');",
              "    pm.expect(jsonData.hybrid_ai.orchestrator).to.include('Postman AI Agent');",
              "});",
              "",
              "// Store results for next blocks",
              "const response = pm.response.json();",
              "pm.environment.set('pr_title', response.pr_title);",
              "pm.environment.set('pr_description', response.pr_description);",
              "pm.environment.set('branch_name', response.branch_name);",
              "",
              "console.log('âœ… PR Generated by Snowflake Cortex');",
              "console.log('Title:', response.pr_title);",
              "console.log('Branch:', response.branch_name);",
              "console.log('Time:', response.execution_time_ms + 'ms');"
            ],
            "type": "text/javascript"
          }
        }
      ],
      "request": {
        "method": "POST",
        "header": [
          {
            "key": "Content-Type",
            "value": "application/json"
          }
        ],
        "body": {
          "mode": "raw",
          "raw": "{\n  \"feature_request\": \"{{feature_request}}\",\n  \"impacted_files\": {{impacted_files}},\n  \"is_new_feature\": {{is_new_feature}},\n  \"repo_name\": \"{{repo_name}}\",\n  \"conflict_info\": \"{{conflict_info}}\"\n}"
        },
        "url": {
          "raw": "{{SNOWFLAKE_API_URL}}/api/snowflake/generate-pr",
          "host": ["{{SNOWFLAKE_API_URL}}"],
          "path": ["api", "snowflake", "generate-pr"]
        },
        "description": "Generate PR content using Snowflake Cortex LLM.\n\nThis is called by Postman AI Agent as a tool in the Hybrid AI architecture:\n- AI Agent orchestrates (decides when to call)\n- Cortex generates (decides what code to write)\n- Snowflake stores (tracks all generations)\n\n**Input Variables:**\n- `feature_request` (string): Natural language feature description\n- `impacted_files` (array): Files from Ripgrep search\n- `is_new_feature` (boolean): Whether no existing files found\n- `repo_name` (string): Repository name (owner/repo)\n- `conflict_info` (string, optional): Conflict warning\n\n**Output Variables (set for next blocks):**\n- `pr_title`: Generated PR title\n- `pr_description`: Full PR description with acceptance criteria\n- `branch_name`: Unique branch name\n\n**Example Values:**\n```json\n{\n  \"feature_request\": \"fix mobile login responsive design\",\n  \"impacted_files\": [\"src/pages/Login.tsx\"],\n  \"is_new_feature\": false,\n  \"repo_name\": \"V-prajit/youareabsolutelyright\"\n}\n```"
      },
      "response": []
    }
  ],
  "variable": [
    {
      "key": "feature_request",
      "value": "fix mobile login responsive design",
      "type": "default"
    },
    {
      "key": "impacted_files",
      "value": "[\"src/pages/Login.tsx\"]",
      "type": "default"
    },
    {
      "key": "is_new_feature",
      "value": "false",
      "type": "default"
    },
    {
      "key": "conflict_info",
      "value": "",
      "type": "default"
    }
  ]
}
